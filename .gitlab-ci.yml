.initenv-script: &initenv-script
  - git submodule sync --recursive
  - git submodule update --init --recursive
  - cd repo-tool
  - ./init-build.sh -c
  - ./init-build.sh -g "$REPO_TOOL_GROUPS"
  - cat ${CI_PROJECT_DIR}/conf/bblayers.conf.sample $LAYERS_SAMPLE > ${CI_PROJECT_DIR}/repo-tool/build/conf/bblayers.conf
  - source setup_env.sh
  - export

.create-links-for-deploy: &create-links-for-deploy
 - test -e ${CI_PROJECT_DIR}/deploy && unlink ${CI_PROJECT_DIR}/deploy; 
 - ln -sf /srv/emac-oe/deploy/$EMAC_CLIENT_NAME/$EMAC_IMAGE/$MACHINE ${CI_PROJECT_DIR}/deploy

variables:
  MACHINE: "none"
  REPO_TOOL_GROUPS: 'default'
  LAYERS_SAMPLE: '${CI_PROJECT_DIR}/conf/machine/${MACHINE}/${MACHINE}.bblayers.conf.sample'
  EMAC_CLIENT_NAME: 'emac'
  EMAC_IMAGE: 'emac-image'
  BB_NUMBER_THREADS: "20"
  PARALLEL_MAKE: "-j 12"
  GIT_CLEAN_FLAGS: none
  
stages:
  - setup
  - build
  - test
  - deploy

init-env:
  stage: setup
  variables:
    GIT_STRATEGY: fetch
  when: manual
  allow_failure: true
  tags:
    - oe-builder
    - bitbake
  script:
    - *initenv-script

clean-build:
  stage: setup
  variables:
    GIT_STRATEGY: none
  tags:
    - oe-builder
    - bitbake
  when: manual
  allow_failure: true
  script:
    - pushd repo-tool
    - ./init-build.sh -c
    - rm -rf build

clean-image:
  stage: setup
  variables:
    GIT_STRATEGY: none
  tags:
    - oe-builder
    - bitbake
  when: manual
  allow_failure: true
  script:
    - cd repo-tool
    - source start_afterclose.sh
    - bitbake $EMAC_IMAGE -c clean

clean-sstate:
  stage: setup
  variables:
    GIT_STRATEGY: none
  tags:
    - oe-builder
    - bitbake
  when: manual
  allow_failure: true
  script:
    - cd repo-tool
    - source start_afterclose.sh
    - bitbake $EMAC_IMAGE -c cleansstate

.build-standard:
  variables:
    GIT_STRATEGY: none
    BITBAKE_CMD: 'bitbake'
  tags:
    - oe-builder
    - bitbake
  timeout: 6hr
  script:
    - *initenv-script
    - $BITBAKE_CMD $EMAC_IMAGE
    - *create-links-for-deploy
  artifacts:
    paths:
      - deploy/image/*.tgz
      - deploy/image/*.manifest
      - deploy/image/*.json
      - deploy/image/*.tar.gz
      - deploy/image/*.dtb
      - deploy/image/*.bin
      - deploy/image/*.wic
      - deploy/image/*.ext4
      - deploy/image/zImage
      - deploy/image/SPL
      - deploy/image/MLO
      - deploy/image/MLO.byteswap

build-emac-image:
  stage: build
  extends: .build-standard
  rules:
  - if: '$MACHINE != "none"'

build-emac-image-sdk:
  stage: build
  extends: .build-standard
  when: manual
  allow_failure: true
  variables:
    BITBAKE_CMD: 'bitbake -c do_populate_sdk'

.build-standard-qemu-arm:
  variables:
    GIT_STRATEGY: none
  tags:
    - oe-builder
    - bitbake
  when: manual
  allow_failure: true
  script:
    - cd repo-tool
    - source start_afterclose.sh
    - bitbake mc:qemu-armv7:$EMAC_IMAGE
    - *create-links-for-deploy
  artifacts:
    paths:
      - deploy/image/*.manifest
      - deploy/image/*.json
      - deploy/image/*.sh

.build-standard-qemu-x86:
  variables:
    GIT_STRATEGY: none
  tags:
    - oe-builder
    - bitbake
  when: manual
  allow_failure: true
  script:
    - cd repo-tool
    - source start_afterclose.sh
    - bitbake mc:qemu-x86-64:$EMAC_IMAGE
    - *create-links-for-deploy
  artifacts:
    paths:
      - deploy/image/*.conf
      - deploy/image/*.ext4
      - deploy/image/*.manifest
      - deploy/image/*.bz2
      - deploy/image/*.json
      - deploy/image/*/tgz
      - deploy/image/zImage
      - deploy/image/*.bin

build-emac-image-qemu-arm:
  stage: build
  extends: .build-standard-qemu-arm
  variables:
    EMAC_IMAGE: 'emac-image'

build-emac-image-qemu-x86:
  stage: build
  extends: .build-standard-qemu-x86
  variables:
    EMAC_IMAGE: 'emac-image'

test-image:
  stage: test
  variables:
    GIT_STRATEGY: none
  tags:
    - oe-builder
    - bitbake
  rules:
    - if: '$MACHINE != "none"'
  script:
    - echo "Nothing to do here. Yet"

deploy-image:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  tags:
    - oe-builder
    - bitbake
  rules:
    - if: '$MACHINE != "none"'
  script:
    - echo "Nothing to do here Yet"

