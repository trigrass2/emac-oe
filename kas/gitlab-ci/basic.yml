.kas-build:
  stage: build
  dependencies: []
  variables:
    KAS_MACHINES_FILE: "kas/machines/genericx86.yml:"
    KAS_DISTROS_FILE: "kas/distros/poky.yml:"
    KAS_OPTION_FILES: "kas/options/persistent_downloads_sstate.yml:"
    KAS_SOFTWARE_STACK: ""
    KASFILES: "${KAS_DISTROS_FILE}${KAS_MACHINES_FILE}${KAS_SOFTWARE_STACK}${KAS_OPTION_FILES}kas/gitlab-ci/current-branch.yml"
  tags:
    - oe-builder
  script:
    - export ARCHIVE_PATH="$(kas shell $KASFILES -c "bitbake -e" | grep ^ARCHIVE_PATH= | sed 's|=| |g' | awk '{print $2}' | sed 's|\"||g')";
    - rm -rf build/buildhistory/ build/cache/
    - rm -rf build/tmp*
    - |
      if [ -f "/srv/yocto/persist/${ARCHIVE_PATH}/persist-data.tar" ]; then
        echo "Found Persistent Data";
        mkdir -p build/;
        tar xf /srv/yocto/persist/${ARCHIVE_PATH}/persist-data.tar -C build/;
      fi
    - |
      if [ -n "$CI_COMMIT_BRANCH" ]; then
        echo "KAS: $CI_COMMIT_BRANCH"
        sed -i "s|CURRENTREF|$CI_COMMIT_BRANCH|g" kas/gitlab-ci/current-branch.yml
      else
        if [ -n "$CI_COMMIT_TAG" ]; then
          echo "KAS: $CI_COMMIT_TAG"
          sed -i "s|CURRENTREF|$CI_COMMIT_TAG|g" kas/gitlab-ci/current-branch.yml
        else
          echo "KAS: $CI_COMMIT_SHA"
          sed -i "s|CURRENTREF|$CI_COMMIT_SHA|g" kas/gitlab-ci/current-branch.yml
        fi;
      fi
    - kas build --update --force-checkout $KASFILES
    - if [ -f build/bitbake.lock ]; then rm build/bitbake.*; fi
    - |
      if test "$INCLUDE_SDK" == "true"; then
        export KAS_TASK=do_populate_sdk;
        kas build $KASFILES;
        unset KAS_TASK;
        if [ -f build/bitbake.lock ]; then rm build/bitbake.*; fi
      fi
    - |
      if [ "$OE_DEPLOYMENT" == "true" ]; then
        kas shell $KASFILES -c "bitbake package-index"; 
        export DEPLOY_DIR="$(kas shell $KASFILES -c "bitbake -e" | grep ^DEPLOY_DIR= | sed 's|=| |g' | awk '{print $2}' | sed 's|\"||g')";
        upload_oe;
        upload_oe_archive;
      else
        export DEPLOY_DIR="$(kas shell $KASFILES -c "bitbake -e" | grep ^DEPLOY_DIR= | sed 's|=| |g' | awk '{print $2}' | sed 's|\"||g')";
        tar zxf ${CI_PROJECT_DIR}/deploy_dir.tar.gz -C ${DEPLOY_DIR} .;
      fi
    - mkdir -p /srv/yocto/persist/${ARCHIVE_PATH}
    - tar cf /srv/yocto/persist/${ARCHIVE_PATH}/persist-data.tar -C build/ buildhistory/ cache/

  after_script:
    - git restore .
    - if [ -f build/bitbake.lock ]; then rm build/bitbake.*; fi
    - rm -rf build/tmp*; sync
  artifacts:
    paths:
      - build/conf
      - deploy_dir.tar.gz

wipe-all:
  stage: clean
  dependencies: []
  tags:
    - oe-builder
  when: manual
  allow_failure: true
  script:
    - git clean -fX
